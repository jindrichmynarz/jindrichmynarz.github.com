;; Analyzed by ClojureScript 0.0-3196
{:use-macros nil, :excludes #{}, :name db-quiz.layout, :imports nil, :requires {string clojure.string, clojure.string clojure.string, db-quiz.config db-quiz.config}, :uses {config db-quiz.config}, :defs {hex-triangle {:meta {:end-column 18, :end-line 74, :column 6, :line 74, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/layout.cljs"}, :file "src/cljs/db_quiz/layout.cljs", :line 74, :column 1, :end-line 74, :end-column 18, :test true, :name db-quiz.layout/hex-triangle}, hexagon {:protocol-inline nil, :meta {:arglists (quote ([{:keys [center size text]}])), :doc "Generate hexagon of @size containing @text\n  centered at @center [x y].", :end-column 14, :end-line 51, :column 7, :line 51, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/layout.cljs"}, :name db-quiz.layout/hexagon, :variadic false, :file "src/cljs/db_quiz/layout.cljs", :end-column 14, :method-params ([p__9125]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [center size text]}])), :doc "Generate hexagon of @size containing @text\n  centered at @center [x y].", :test true}, hex-coords {:protocol-inline nil, :meta {:arglists (quote ([center size])), :doc "Generates coordinates for a hexagon of @size\n  centered at @center [x y].", :end-column 17, :end-line 42, :column 7, :line 42, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/layout.cljs"}, :name db-quiz.layout/hex-coords, :variadic false, :file "src/cljs/db_quiz/layout.cljs", :end-column 17, :method-params ([center size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([center size])), :doc "Generates coordinates for a hexagon of @size\n  centered at @center [x y].", :test true}, hex-corner {:protocol-inline nil, :meta {:arglists (quote ([[x y] size i])), :doc "Generate coordinates for a hexagon's corner, where\n  [x y] are the coordinates of the hexagon's center,\n  size is the hexagon's diameter, and i the corner's degree.", :end-column 17, :end-line 31, :column 7, :line 31, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/layout.cljs"}, :name db-quiz.layout/hex-corner, :variadic false, :file "src/cljs/db_quiz/layout.cljs", :end-column 17, :method-params ([p__9121 size i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[x y] size i])), :doc "Generate coordinates for a hexagon's corner, where\n  [x y] are the coordinates of the hexagon's center,\n  size is the hexagon's diameter, and i the corner's degree.", :test true}, get-gradients {:protocol-inline nil, :meta {:arglists (quote ([status colour])), :end-column 20, :end-line 20, :column 7, :line 20, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/layout.cljs"}, :name db-quiz.layout/get-gradients, :variadic false, :file "src/cljs/db_quiz/layout.cljs", :end-column 20, :method-params ([status colour]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([status colour])), :test true}, shade-colour {:protocol-inline nil, :meta {:arglists (quote ([colour percent])), :doc "Shade hexadecimal RGB @colour by @percent.\n  Stolen from <http://stackoverflow.com/a/13542669/385505>.", :end-column 19, :end-line 6, :column 7, :line 6, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/layout.cljs"}, :name db-quiz.layout/shade-colour, :variadic false, :file "src/cljs/db_quiz/layout.cljs", :end-column 19, :method-params ([colour percent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([colour percent])), :doc "Shade hexadecimal RGB @colour by @percent.\n  Stolen from <http://stackoverflow.com/a/13542669/385505>.", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else :layout :hex-shade :stop :offset :stop-color :linearGradient :id :x1 :x2 :y1 :y2 :key :text :size :center :inner-hex-offset :g.hexagon :class :on-click :polygon.hex-outer :fill :points :polygon.hex-inner :transform :x :y :font-size :text-anchor :space :border-width :hex-radius :board-size :svg#hex-triangle :width :height :defs :colours], :seen #{:y :inner-hex-offset :text-anchor :svg#hex-triangle :space :stop-color :transform :key :else :font-size :offset :layout :board-size :fill :colours :y1 :width :polygon.hex-inner :points :polygon.hex-outer :on-click :size :center :stop :border-width :id :class :defs :hex-shade :linearGradient :hex-radius :x :x1 :y2 :x2 :g.hexagon :height :text}}, :doc nil}
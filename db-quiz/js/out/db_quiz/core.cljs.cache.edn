;; Analyzed by ClojureScript 0.0-3196
{:use-macros {defroute secretary.core, go cljs.core.async.macros}, :excludes #{}, :name db-quiz.core, :imports {History goog.History}, :requires {db-quiz.model db-quiz.model, db-quiz.layout db-quiz.layout, reagent reagent.core, secretary secretary.core, reagent.session reagent.session, session reagent.session, model db-quiz.model, EventType goog.history.EventType, reagent.core reagent.core, react cljsjs.react, goog.history.EventType goog.history.EventType, cljsjs.react cljsjs.react, cljs.core.async cljs.core.async, db-quiz.config db-quiz.config, History goog.History, events goog.events, string clojure.string, secretary.core secretary.core, clojure.string clojure.string, goog.events goog.events}, :uses {atom reagent.core, <! cljs.core.async, config db-quiz.config, hex-triangle db-quiz.layout}, :defs {items {:meta {:end-column 11, :end-line 19, :column 6, :line 19, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :file "src/cljs/db_quiz/core.cljs", :line 19, :column 1, :end-line 19, :end-column 11, :test true, :name db-quiz.core/items}, mount-root {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 17, :end-line 135, :column 7, :line 135, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :name db-quiz.core/mount-root, :variadic false, :file "src/cljs/db_quiz/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, current-page {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 19, :end-line 88, :column 7, :line 88, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :name db-quiz.core/current-page, :variadic false, :file "src/cljs/db_quiz/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, play-page {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 16, :end-line 72, :column 7, :line 72, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :name db-quiz.core/play-page, :variadic false, :file "src/cljs/db_quiz/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, load-items {:protocol-inline nil, :meta {:arglists (quote ([offset])), :end-column 17, :end-line 47, :column 7, :line 47, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :name db-quiz.core/load-items, :variadic false, :file "src/cljs/db_quiz/core.cljs", :end-column 17, :method-params ([offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([offset])), :test true}, items-page {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 17, :end-line 91, :column 7, :line 91, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :name db-quiz.core/items-page, :variadic false, :file "src/cljs/db_quiz/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, board {:meta {:end-column 11, :end-line 45, :column 6, :line 45, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :file "src/cljs/db_quiz/core.cljs", :line 45, :column 1, :end-line 45, :end-column 11, :test true, :name db-quiz.core/board}, home-page {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 16, :end-line 68, :column 7, :line 68, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :name db-quiz.core/home-page, :variadic false, :file "src/cljs/db_quiz/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, init! {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 12, :end-line 138, :column 7, :line 138, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :name db-quiz.core/init!, :variadic false, :file "src/cljs/db_quiz/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, init-board {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [letters-board], :or {letters-board true}})], :arglists [[& {:keys [letters-board], :or {letters-board true}}]], :arglists-meta (nil)}, :arglists (quote ([& {:keys [letters-board], :or {letters-board true}}])), :doc "@letters-board is a boolean flag specifying if letters should be used instead of numbers.", :end-column 17, :end-line 21, :column 7, :line 21, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :name db-quiz.core/init-board, :variadic true, :file "src/cljs/db_quiz/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [letters-board], :or {letters-board true}})], :arglists [[& {:keys [letters-board], :or {letters-board true}}]], :arglists-meta (nil)}, :method-params [({:keys [letters-board], :or {letters-board true}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 0, :fn-var true, :arglists [[& {:keys [letters-board], :or {letters-board true}}]], :doc "@letters-board is a boolean flag specifying if letters should be used instead of numbers.", :test true}, app-state {:meta {:end-column 15, :end-line 17, :column 6, :line 17, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :file "src/cljs/db_quiz/core.cljs", :line 17, :column 1, :end-line 17, :end-column 15, :test true, :name db-quiz.core/app-state}, end-page {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 15, :end-line 82, :column 7, :line 82, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :name db-quiz.core/end-page, :variadic false, :file "src/cljs/db_quiz/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, hook-browser-navigation! {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 31, :end-line 125, :column 7, :line 125, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/core.cljs"}, :name db-quiz.core/hook-browser-navigation!, :variadic false, :file "src/cljs/db_quiz/core.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}}, :require-macros {secretary secretary.core, secretary.core secretary.core, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:data :loading :letters-board :board-size :letters :c :b :a :text :neighbours :ownership :sides :default :sparql :endpoint :classes :description :label :offset :recur :else :prefix :div :a.button :href :span :div#loading :div#loadhex :p :h2 :current-page :strong :for :input :type :id :min :max :on-mouse-up :table :thead :tr :th :tbody :s :abbreviation :td :key :ns :name :file :end-column :column :line :end-line :arglists :doc :test], :seen #{:description :thead :min :div#loading :tbody :table :neighbours :key :else :offset :sparql :default :ns :strong :name :board-size :td :th :file :tr :end-column :recur :type :a.button :s :prefix :column :div :c :for :letters :line :loading :letters-board :max :label :sides :id :ownership :b :end-line :div#loadhex :on-mouse-up :h2 :input :arglists :doc :endpoint :current-page :abbreviation :p :test :href :classes :a :text :span :data}}, :doc nil}
;; Analyzed by ClojureScript 0.0-3196
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{replace}, :name db-quiz.model, :imports nil, :requires {mustache cljsjs.mustache, cljsjs.mustache cljsjs.mustache, clojure.string clojure.string, cljs.core.async cljs.core.async, http cljs-http.client, cljs-http.client cljs-http.client, db-quiz.config db-quiz.config}, :uses {<! cljs.core.async, join clojure.string, chan cljs.core.async, replace clojure.string, config db-quiz.config, lower-case clojure.string, sliding-buffer cljs.core.async, >! cljs.core.async, split clojure.string, trim clojure.string}, :defs {replace-surface-forms {:protocol-inline nil, :meta {:arglists (quote ([description abbreviation surface-forms])), :doc "Replace a set of @surface-forms appearing in @description with @abbreviation.", :end-column 28, :end-line 65, :column 7, :line 65, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :name db-quiz.model/replace-surface-forms, :variadic false, :file "src/cljs/db_quiz/model.cljs", :end-column 28, :method-params ([description abbreviation surface-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 3, :fn-var true, :arglists (quote ([description abbreviation surface-forms])), :doc "Replace a set of @surface-forms appearing in @description with @abbreviation.", :test true}, clean-surface-form? {:protocol-inline nil, :meta {:arglists (quote ([surface-form])), :doc "Predicate that validates a @surface-form.", :end-column 26, :end-line 75, :column 7, :line 75, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :name db-quiz.model/clean-surface-form?, :variadic false, :file "src/cljs/db_quiz/model.cljs", :end-column 26, :method-params ([surface-form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([surface-form])), :doc "Predicate that validates a @surface-form.", :test true}, delete-parenthesized-parts {:protocol-inline nil, :meta {:arglists (quote ([text])), :end-column 33, :end-line 37, :column 7, :line 37, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :name db-quiz.model/delete-parenthesized-parts, :variadic false, :file "src/cljs/db_quiz/model.cljs", :end-column 33, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :test true}, loading? {:meta {:end-column 14, :end-line 17, :column 6, :line 17, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :file "src/cljs/db_quiz/model.cljs", :line 17, :column 1, :end-line 17, :end-column 14, :test true, :name db-quiz.model/loading?}, clear-tokens {:protocol-inline nil, :meta {:arglists (quote ([tokens])), :end-column 19, :end-line 47, :column 7, :line 47, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :name db-quiz.model/clear-tokens, :variadic false, :file "src/cljs/db_quiz/model.cljs", :end-column 19, :method-params ([tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tokens])), :test true}, sentence-start {:meta {:end-column 20, :end-line 13, :column 6, :line 13, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :file "src/cljs/db_quiz/model.cljs", :line 13, :column 1, :end-line 13, :end-column 20, :test true, :name db-quiz.model/sentence-start}, clear-label {:protocol-inline nil, :meta {:arglists (quote ([label])), :end-column 18, :end-line 41, :column 7, :line 41, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :name db-quiz.model/clear-label, :variadic false, :file "src/cljs/db_quiz/model.cljs", :end-column 18, :method-params ([label]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([label])), :test true}, abbreviate {:protocol-inline nil, :meta {:arglists (quote ([tokens])), :doc "Convert @tokens into an abbreviation.", :end-column 17, :end-line 59, :column 7, :line 59, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :name db-quiz.model/abbreviate, :variadic false, :file "src/cljs/db_quiz/model.cljs", :end-column 17, :method-params ([tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tokens])), :doc "Convert @tokens into an abbreviation.", :test true}, render-template {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(template {:keys [data]})], :arglists [[template & {:keys [data]}]], :arglists-meta (nil)}, :arglists (quote ([template & {:keys [data]}])), :doc "Render Mustache @template with @data.", :end-column 22, :end-line 32, :column 7, :line 32, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :name db-quiz.model/render-template, :variadic true, :file "src/cljs/db_quiz/model.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(template {:keys [data]})], :arglists [[template & {:keys [data]}]], :arglists-meta (nil)}, :method-params [(template {:keys [data]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists [[template & {:keys [data]}]], :doc "Render Mustache @template with @data.", :test true}, tokenize {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Split @s into tokens delimited by whitespace.", :end-column 15, :end-line 54, :column 7, :line 54, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :name db-quiz.model/tokenize, :variadic false, :file "src/cljs/db_quiz/model.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Split @s into tokens delimited by whitespace.", :test true}, sparql-query {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(sparql-endpoint query-path {:keys [data]})], :arglists [[sparql-endpoint query-path & {:keys [data]}]], :arglists-meta (nil)}, :arglists (quote ([sparql-endpoint query-path & {:keys [data]}])), :doc "Send a SPARQL query from file on @query-path to @sparql-endpoint.", :end-column 19, :end-line 102, :column 7, :line 102, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :name db-quiz.model/sparql-query, :variadic true, :file "src/cljs/db_quiz/model.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(sparql-endpoint query-path {:keys [data]})], :arglists [[sparql-endpoint query-path & {:keys [data]}]], :arglists-meta (nil)}, :method-params [(sparql-endpoint query-path {:keys [data]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists [[sparql-endpoint query-path & {:keys [data]}]], :doc "Send a SPARQL query from file on @query-path to @sparql-endpoint.", :test true}, despoilerify {:protocol-inline nil, :meta {:arglists (quote ([{:keys [label description surfaceForms], :as item}])), :doc "Replace spoilers suggesting @label from @description", :end-column 19, :end-line 81, :column 7, :line 81, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/src/cljs/db_quiz/model.cljs"}, :name db-quiz.model/despoilerify, :variadic false, :file "src/cljs/db_quiz/model.cljs", :end-column 19, :method-params ([p__9074]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [label description surfaceForms], :as item}])), :doc "Replace spoilers suggesting @label from @description", :test true}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:data :surfaceForms :description :label :abbreviation :surface-forms :channel :body :value :bindings :results :query-params :format :query :recur :else], :seen #{:description :format :else :bindings :value :channel :recur :label :query-params :query :body :surfaceForms :abbreviation :surface-forms :data :results}}, :doc nil}
;; Analyzed by ClojureScript 0.0-3196
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name cljs-http.core, :imports {Jsonp goog.net.Jsonp, EventType goog.net.EventType, XhrIo goog.net.XhrIo}, :requires {async cljs.core.async, cljs.core.async cljs.core.async, util cljs-http.util, cljs-http.util cljs-http.util, Jsonp goog.net.Jsonp, EventType goog.net.EventType, XhrIo goog.net.XhrIo}, :uses nil, :defs {request {:protocol-inline nil, :meta {:arglists (quote ([{:keys [request-method], :as request}])), :doc "Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.", :end-column 14, :end-line 102, :column 7, :line 102, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/core.cljs"}, :name cljs-http.core/request, :variadic false, :file "resources/public/js/out/cljs_http/core.cljs", :end-column 14, :method-params ([p__12751]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [request-method], :as request}])), :doc "Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.", :test true}, jsonp {:protocol-inline nil, :meta {:arglists (quote ([{:keys [timeout callback-name cancel], :as request}])), :doc "Execute the JSONP request corresponding to the given Ring request\n  map and return a core.async channel.", :end-column 12, :end-line 75, :column 7, :line 75, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/core.cljs"}, :name cljs-http.core/jsonp, :variadic false, :file "resources/public/js/out/cljs_http/core.cljs", :end-column 12, :method-params ([p__12716]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [timeout callback-name cancel], :as request}])), :doc "Execute the JSONP request corresponding to the given Ring request\n  map and return a core.async channel.", :test true}, xhr {:protocol-inline nil, :meta {:arglists (quote ([{:keys [request-method headers body with-credentials? cancel], :as request}])), :doc "Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.", :end-column 10, :end-line 44, :column 7, :line 44, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/core.cljs"}, :name cljs-http.core/xhr, :variadic false, :file "resources/public/js/out/cljs_http/core.cljs", :end-column 10, :method-params ([p__12658]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [request-method headers body with-credentials? cancel], :as request}])), :doc "Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.", :test true}, build-xhr {:protocol-inline nil, :meta {:arglists (quote ([{:keys [with-credentials? default-headers], :as request}])), :doc "Builds an XhrIo object from the request parameters.", :end-column 16, :end-line 32, :column 7, :line 32, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/core.cljs"}, :name cljs-http.core/build-xhr, :variadic false, :file "resources/public/js/out/cljs_http/core.cljs", :end-column 16, :method-params ([p__12653]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [with-credentials? default-headers], :as request}])), :doc "Builds an XhrIo object from the request parameters.", :test true}, apply-default-headers! {:protocol-inline nil, :meta {:arglists (quote ([xhr headers])), :doc "Takes an XhrIo object and applies the default-headers to it.", :end-column 29, :end-line 25, :column 7, :line 25, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/core.cljs"}, :name cljs-http.core/apply-default-headers!, :variadic false, :file "resources/public/js/out/cljs_http/core.cljs", :end-column 29, :method-params ([xhr headers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xhr headers])), :doc "Takes an XhrIo object and applies the default-headers to it.", :test true}, aborted? {:protocol-inline nil, :meta {:arglists (quote ([xhr])), :private true, :end-column 16, :end-line 22, :column 8, :line 22, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/core.cljs"}, :private true, :name cljs-http.core/aborted?, :variadic false, :file "resources/public/js/out/cljs_http/core.cljs", :end-column 16, :method-params ([xhr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhr])), :test true}, abort! {:protocol-inline nil, :meta {:arglists (quote ([channel])), :doc "Attempt to close the given channel and abort the pending HTTP request\n  with which it is associated.", :end-column 13, :end-line 11, :column 7, :line 11, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/core.cljs"}, :name cljs-http.core/abort!, :variadic false, :file "resources/public/js/out/cljs_http/core.cljs", :end-column 13, :method-params ([channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channel])), :doc "Attempt to close the given channel and abort the pending HTTP request\n  with which it is associated.", :test true}, pending-requests {:meta {:end-column 22, :end-line 9, :column 6, :line 9, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/core.cljs"}, :file "resources/public/js/out/cljs_http/core.cljs", :line 9, :column 1, :end-line 9, :end-column 22, :test true, :name cljs-http.core/pending-requests}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:jsonp :request :default-headers :with-credentials? :timeout :cancel :body :headers :request-method :get :status :success :trace-redirects :recur :else :callback-name :keywordize-keys], :seen #{:request :get :jsonp :else :callback-name :recur :headers :default-headers :with-credentials? :success :status :cancel :timeout :body :keywordize-keys :trace-redirects :request-method}}, :doc nil}
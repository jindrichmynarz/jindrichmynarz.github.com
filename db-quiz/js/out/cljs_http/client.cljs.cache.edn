;; Analyzed by ClojureScript 0.0-3196
{:use-macros {go cljs.core.async.macros}, :excludes #{get}, :name cljs-http.client, :imports nil, :requires {uri goog.Uri, cljs-http.core cljs-http.core, async cljs.core.async, no.en.core no.en.core, goog.Uri goog.Uri, cljs-http.util cljs-http.util, cljs.core.async cljs.core.async, util cljs-http.util, clojure.string clojure.string, cljs.reader cljs.reader, core cljs-http.core}, :uses {url-decode no.en.core, <! cljs.core.async, join clojure.string, close! cljs.core.async, chan cljs.core.async, url-encode no.en.core, read-string cljs.reader, split clojure.string, put! cljs.core.async, blank? clojure.string}, :defs {options {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :end-column 14, :end-line 320, :column 7, :line 320, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/options, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 320, :end-line 320, :max-fixed-arity 1, :fn-var true, :arglists [[url & [req]]], :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, encode-val {:protocol-inline nil, :meta {:arglists (quote ([k v])), :private true, :end-column 18, :end-line 45, :column 8, :line 45, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :private true, :name cljs-http.client/encode-val, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 18, :method-params ([k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k v])), :test true}, put {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :end-column 10, :end-line 335, :column 7, :line 335, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/put, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 1, :fn-var true, :arglists [[url & [req]]], :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, parse-query-params {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Parse `s` as query params and return a hash map.", :end-column 25, :end-line 16, :column 7, :line 16, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/parse-query-params, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 25, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse `s` as query params and return a hash map.", :test true}, wrap-accept {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [accept])], :arglists [[client & [accept]]], :arglists-meta (nil)}, :arglists (quote ([client & [accept]])), :end-column 18, :end-line 113, :column 7, :line 113, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-accept, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [accept])], :arglists [[client & [accept]]], :arglists-meta (nil)}, :method-params [(client [accept])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists [[client & [accept]]], :test true}, wrap-content-type {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [content-type])], :arglists [[client & [content-type]]], :arglists-meta (nil)}, :arglists (quote ([client & [content-type]])), :end-column 24, :end-line 120, :column 7, :line 120, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-content-type, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [content-type])], :arglists [[client & [content-type]]], :arglists-meta (nil)}, :method-params [(client [content-type])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists [[client & [content-type]]], :test true}, wrap-edn-params {:protocol-inline nil, :meta {:arglists (quote ([client])), :doc "Encode :edn-params in the `request` :body and set the appropriate\n  Content Type header.", :end-column 22, :end-line 87, :column 7, :line 87, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-edn-params, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 22, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Encode :edn-params in the `request` :body and set the appropriate\n  Content Type header.", :test true}, wrap-form-params {:protocol-inline nil, :meta {:arglists (quote ([client])), :end-column 23, :end-line 190, :column 7, :line 190, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-form-params, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 23, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :test true}, wrap-basic-auth {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [credentials])], :arglists [[client & [credentials]]], :arglists-meta (nil)}, :arglists (quote ([client & [credentials]])), :doc "Middleware converting the :basic-auth option or `credentials` into\n  an Authorization header.", :end-column 22, :end-line 231, :column 7, :line 231, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-basic-auth, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [credentials])], :arglists [[client & [credentials]]], :arglists-meta (nil)}, :method-params [(client [credentials])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 1, :fn-var true, :arglists [[client & [credentials]]], :doc "Middleware converting the :basic-auth option or `credentials` into\n  an Authorization header.", :test true}, wrap-request {:protocol-inline nil, :meta {:arglists (quote ([request])), :doc "Returns a batteries-included HTTP request function coresponding to the given\n   core client. See client/request", :end-column 19, :end-line 261, :column 7, :line 261, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-request, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 19, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 261, :end-line 261, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Returns a batteries-included HTTP request function coresponding to the given\n   core client. See client/request", :test true}, encode-param {:protocol-inline nil, :meta {:arglists (quote ([[k v]])), :private true, :end-column 20, :end-line 54, :column 8, :line 54, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :private true, :name cljs-http.client/encode-param, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 20, :method-params ([p__12268]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[k v]])), :test true}, request {:meta {:doc "Executes the HTTP request corresponding to the given map and returns the\n   response map for corresponding to the resulting HTTP response.\n\n   In addition to the standard Ring request keys, the following keys are also\n   recognized:\n   * :url\n   * :method\n   * :query-params", :end-column 10, :end-line 293, :column 3, :line 293, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :file "resources/public/js/out/cljs_http/client.cljs", :line 284, :column 1, :end-line 293, :end-column 10, :doc "Executes the HTTP request corresponding to the given map and returns the\n   response map for corresponding to the resulting HTTP response.\n\n   In addition to the standard Ring request keys, the following keys are also\n   recognized:\n   * :url\n   * :method\n   * :query-params", :test true, :name cljs-http.client/request}, get {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :end-column 10, :end-line 300, :column 7, :line 300, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/get, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 1, :fn-var true, :arglists [[url & [req]]], :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, jsonp {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :end-column 12, :end-line 310, :column 7, :line 310, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/jsonp, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 1, :fn-var true, :arglists [[url & [req]]], :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, patch {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :end-column 12, :end-line 325, :column 7, :line 325, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/patch, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists [[url & [req]]], :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, decode-body {:protocol-inline nil, :meta {:arglists (quote ([response decode-fn content-type request-method])), :doc "Decocde the :body of `response` with `decode-fn` if the content type matches.", :end-column 18, :end-line 77, :column 7, :line 77, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/decode-body, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 18, :method-params ([response decode-fn content-type request-method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 4, :fn-var true, :arglists (quote ([response decode-fn content-type request-method])), :doc "Decocde the :body of `response` with `decode-fn` if the content type matches.", :test true}, wrap-json-response {:protocol-inline nil, :meta {:arglists (quote ([client])), :doc "Decode application/json responses.", :end-column 25, :end-line 175, :column 7, :line 175, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-json-response, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 25, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Decode application/json responses.", :test true}, wrap-transit-response {:protocol-inline nil, :meta {:arglists (quote ([client])), :doc "Decode application/transit+json responses.", :end-column 28, :end-line 152, :column 7, :line 152, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-transit-response, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 28, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Decode application/transit+json responses.", :test true}, wrap-edn-response {:protocol-inline nil, :meta {:arglists (quote ([client])), :doc "Decode application/edn responses.", :end-column 24, :end-line 99, :column 7, :line 99, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-edn-response, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 24, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Decode application/edn responses.", :test true}, generate-form-data {:protocol-inline nil, :meta {:arglists (quote ([params])), :end-column 25, :end-line 199, :column 7, :line 199, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/generate-form-data, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 25, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params])), :test true}, move {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :end-column 11, :end-line 315, :column 7, :line 315, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/move, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 1, :fn-var true, :arglists [[url & [req]]], :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, wrap-default-headers {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [default-headers])], :arglists [[client & [default-headers]]], :arglists-meta (nil)}, :arglists (quote ([client & [default-headers]])), :end-column 27, :end-line 106, :column 7, :line 106, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-default-headers, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [default-headers])], :arglists [[client & [default-headers]]], :arglists-meta (nil)}, :method-params [(client [default-headers])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists [[client & [default-headers]]], :test true}, delete {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :end-column 13, :end-line 295, :column 7, :line 295, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/delete, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 1, :fn-var true, :arglists [[url & [req]]], :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, wrap-json-params {:protocol-inline nil, :meta {:arglists (quote ([client])), :doc "Encode :json-params in the `request` :body and set the appropriate\n  Content Type header.", :end-column 23, :end-line 163, :column 7, :line 163, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-json-params, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 23, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Encode :json-params in the `request` :body and set the appropriate\n  Content Type header.", :test true}, wrap-channel-from-request-map {:protocol-inline nil, :meta {:arglists (quote ([client])), :doc "Pipe the response-channel into the request-map's\n   custom channel (e.g. to enable transducers)", :end-column 36, :end-line 252, :column 7, :line 252, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-channel-from-request-map, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 36, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Pipe the response-channel into the request-map's\n   custom channel (e.g. to enable transducers)", :test true}, parse-url {:protocol-inline nil, :meta {:arglists (quote ([url])), :doc "Parse `url` into a hash map.", :end-column 16, :end-line 27, :column 7, :line 27, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/parse-url, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 16, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Parse `url` into a hash map.", :test true}, wrap-url {:protocol-inline nil, :meta {:arglists (quote ([client])), :end-column 15, :end-line 223, :column 7, :line 223, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-url, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 15, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :test true}, if-pos {:protocol-inline nil, :meta {:arglists (quote ([v])), :end-column 13, :end-line 13, :column 7, :line 13, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/if-pos, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 13, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, default-transit-opts {:meta {:private true, :end-column 43, :end-line 127, :column 23, :line 127, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :file "resources/public/js/out/cljs_http/client.cljs", :line 127, :column 1, :end-line 127, :end-column 43, :private true, :test true, :name cljs-http.client/default-transit-opts}, head {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :end-column 11, :end-line 305, :column 7, :line 305, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/head, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 1, :fn-var true, :arglists [[url & [req]]], :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, regex-char-esc-smap {:meta {:end-column 25, :end-line 65, :column 6, :line 65, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :file "resources/public/js/out/cljs_http/client.cljs", :line 65, :column 1, :end-line 65, :end-column 25, :test true, :name cljs-http.client/regex-char-esc-smap}, wrap-server-name {:protocol-inline nil, :meta {:arglists (quote ([client server-name])), :end-column 23, :end-line 220, :column 7, :line 220, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-server-name, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 23, :method-params ([client server-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 2, :fn-var true, :arglists (quote ([client server-name])), :test true}, wrap-method {:protocol-inline nil, :meta {:arglists (quote ([client])), :end-column 18, :end-line 213, :column 7, :line 213, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-method, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 18, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :test true}, wrap-multipart-params {:protocol-inline nil, :meta {:arglists (quote ([client])), :end-column 28, :end-line 205, :column 7, :line 205, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-multipart-params, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 28, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :test true}, escape-special {:protocol-inline nil, :meta {:arglists (quote ([string])), :doc "Escape special characters -- for content-type.", :end-column 21, :end-line 70, :column 7, :line 70, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/escape-special, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 21, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string])), :doc "Escape special characters -- for content-type.", :test true}, generate-query-string {:protocol-inline nil, :meta {:arglists (quote ([params])), :end-column 28, :end-line 59, :column 7, :line 59, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/generate-query-string, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 28, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params])), :test true}, encode-vals {:protocol-inline nil, :meta {:arglists (quote ([k vs])), :private true, :end-column 19, :end-line 48, :column 8, :line 48, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :private true, :name cljs-http.client/encode-vals, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 19, :method-params ([k vs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k vs])), :test true}, post {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :end-column 11, :end-line 330, :column 7, :line 330, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/post, :variadic true, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists [[url & [req]]], :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 1, :fn-var true, :arglists [[url & [req]]], :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, wrap-transit-params {:protocol-inline nil, :meta {:arglists (quote ([client])), :doc "Encode :transit-params in the `request` :body and set the appropriate\n  Content Type header.\n\n  A :transit-opts map can be optionally provided with the following keys:\n\n  :encoding                #{:json, :json-verbose}\n  :decoding                #{:json, :json-verbose}\n  :encoding/decoding-opts  appropriate map of options to be passed to\n                           transit writer/reader, respectively.", :end-column 26, :end-line 131, :column 7, :line 131, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-transit-params, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 26, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Encode :transit-params in the `request` :body and set the appropriate\n  Content Type header.\n\n  A :transit-opts map can be optionally provided with the following keys:\n\n  :encoding                #{:json, :json-verbose}\n  :decoding                #{:json, :json-verbose}\n  :encoding/decoding-opts  appropriate map of options to be passed to\n                           transit writer/reader, respectively.", :test true}, unexceptional-status? {:meta {:end-column 27, :end-line 42, :column 6, :line 42, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :file "resources/public/js/out/cljs_http/client.cljs", :line 42, :column 1, :end-line 42, :end-column 27, :test true, :name cljs-http.client/unexceptional-status?}, wrap-oauth {:protocol-inline nil, :meta {:arglists (quote ([client])), :doc "Middleware converting the :oauth-token option into an Authorization header.", :end-column 17, :end-line 242, :column 7, :line 242, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-oauth, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 17, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Middleware converting the :oauth-token option into an Authorization header.", :test true}, wrap-query-params {:protocol-inline nil, :meta {:arglists (quote ([client])), :end-column 24, :end-line 182, :column 7, :line 182, :file "/Users/mynarzjindrich/Dev/clojurescript/db-quiz/resources/public/js/out/cljs_http/client.cljs"}, :name cljs-http.client/wrap-query-params, :variadic false, :file "resources/public/js/out/cljs_http/client.cljs", :end-column 24, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :test true}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:scheme :server-name :server-port :uri :query-string :query-params :head :status :headers :body :edn-params :request-method :default-headers :accept :content-type :encoding :encoding-opts :decoding :decoding-opts :json :transit-params :transit-opts :json-params :form-params :patch :delete :post :put :multipart-params :method :url :basic-auth :oauth-token :channel :get :jsonp :move :options], :seen #{:encoding :get :json-params :jsonp :patch :transit-params :method :encoding-opts :move :channel :delete :headers :server-port :head :default-headers :form-params :status :decoding-opts :url :query-params :content-type :oauth-token :post :options :uri :decoding :server-name :put :json :transit-opts :query-string :body :edn-params :basic-auth :multipart-params :scheme :request-method :accept}}, :doc nil}
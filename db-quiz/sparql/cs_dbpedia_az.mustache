{{!
@param int                             difficulty
@param Array<Array<IRI, IRI, boolean>> selectors
@param int                             limit
}}

PREFIX dbo:     <http://dbpedia.org/ontology/>
PREFIX dbq:     <http://mynarz.net/db-quiz/ontology/>
PREFIX rdfs:    <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos:    <http://www.w3.org/2004/02/skos/core#>

SELECT ?subject
       ?label
       ?description
       (GROUP_CONCAT(DISTINCT ?surfaceForm ; separator = "|") AS ?surfaceForms)
WHERE {
  {
    SELECT ?firstLetter (SAMPLE(?_subject) AS ?subject)
    WHERE {
      {{#selectors}}
      {
        SELECT ?_subject ?firstLetter 
        WHERE {
          GRAPH <http://cs.dbpedia.org/db-quiz> {
            ?_subject dbq:difficulty [
                dbq:forSelector [ <{{{p}}}> <{{{o}}}> ] ;
                dbq:difficultyLevel {{difficulty}} 
              ] ;
              rdfs:label ?label .
            BIND (SUBSTR(?label, 1, 1) AS ?_firstLetter)
            {{! Filter to labels starting with a letter or "Ch". }}
            FILTER (REGEX(?_firstLetter, "^[ABCČDEFGHIJKLMNOPRŘSŠTUVWZŽ].*$", "i")
                    ||
                    STRSTARTS(?label, "Ch"))
            BIND (IF(STRSTARTS(?label, "Ch"), "Ch", UCASE(?_firstLetter)) AS ?firstLetter)
          }
        }
      } {{#union?}}UNION{{/union?}}
      {{/selectors}}
    }
    GROUP BY ?firstLetter
  }
  GRAPH <http://cs.dbpedia.org/db-quiz> {
    ?subject rdfs:label ?label ;
      dbo:abstract ?description ;
      skos:altLabel ?surfaceForm .
    FILTER STRSTARTS(UCASE(?label), UCASE(?firstLetter))
  }
}
GROUP BY ?subject ?label ?description
